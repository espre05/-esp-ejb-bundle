//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.02.12 at 11:31:20 AM EST 
//


package esp.ejb.ws.calc;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for calculate complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="calculate"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="data" type="{http://ejb.esp/}inputData"/&gt;
 *         &lt;element name="operation" type="{http://ejb.esp/}statisticalOperation"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "calculate", propOrder = {
    "data",
    "operation"
})

@XmlRootElement //(name = "CNSNTSRV-CNTRTYPEResponse0", namespace = "urn:cpq_tns_CNSNTSRV-CNTRTYPE")
public class Calculate implements Cloneable, CopyTo2, Equals2, HashCode2, ToString2
{

    @XmlElement(required = true)
    protected InputData data;
    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    protected StatisticalOperation operation;

    /**
     * Gets the value of the data property.
     * 
     * @return
     *     possible object is
     *     {@link InputData }
     *     
     */
    public InputData getData() {
        return data;
    }

    /**
     * Sets the value of the data property.
     * 
     * @param value
     *     allowed object is
     *     {@link InputData }
     *     
     */
    public void setData(InputData value) {
        this.data = value;
    }

    /**
     * Gets the value of the operation property.
     * 
     * @return
     *     possible object is
     *     {@link StatisticalOperation }
     *     
     */
    public StatisticalOperation getOperation() {
        return operation;
    }

    /**
     * Sets the value of the operation property.
     * 
     * @param value
     *     allowed object is
     *     {@link StatisticalOperation }
     *     
     */
    public void setOperation(StatisticalOperation value) {
        this.operation = value;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            InputData theData;
            theData = this.getData();
            strategy.appendField(locator, this, "data", buffer, theData, (this.data!= null));
        }
        {
            StatisticalOperation theOperation;
            theOperation = this.getOperation();
            strategy.appendField(locator, this, "operation", buffer, theOperation, (this.operation!= null));
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Calculate that = ((Calculate) object);
        {
            InputData lhsData;
            lhsData = this.getData();
            InputData rhsData;
            rhsData = that.getData();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "data", lhsData), LocatorUtils.property(thatLocator, "data", rhsData), lhsData, rhsData, (this.data!= null), (that.data!= null))) {
                return false;
            }
        }
        {
            StatisticalOperation lhsOperation;
            lhsOperation = this.getOperation();
            StatisticalOperation rhsOperation;
            rhsOperation = that.getOperation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "operation", lhsOperation), LocatorUtils.property(thatLocator, "operation", rhsOperation), lhsOperation, rhsOperation, (this.operation!= null), (that.operation!= null))) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            InputData theData;
            theData = this.getData();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "data", theData), currentHashCode, theData, (this.data!= null));
        }
        {
            StatisticalOperation theOperation;
            theOperation = this.getOperation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operation", theOperation), currentHashCode, theOperation, (this.operation!= null));
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof Calculate) {
            final Calculate copy = ((Calculate) draftCopy);
            {
                Boolean dataShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, (this.data!= null));
                if (dataShouldBeCopiedAndSet == Boolean.TRUE) {
                    InputData sourceData;
                    sourceData = this.getData();
                    InputData copyData = ((InputData) strategy.copy(LocatorUtils.property(locator, "data", sourceData), sourceData, (this.data!= null)));
                    copy.setData(copyData);
                } else {
                    if (dataShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.data = null;
                    }
                }
            }
            {
                Boolean operationShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, (this.operation!= null));
                if (operationShouldBeCopiedAndSet == Boolean.TRUE) {
                    StatisticalOperation sourceOperation;
                    sourceOperation = this.getOperation();
                    StatisticalOperation copyOperation = ((StatisticalOperation) strategy.copy(LocatorUtils.property(locator, "operation", sourceOperation), sourceOperation, (this.operation!= null)));
                    copy.setOperation(copyOperation);
                } else {
                    if (operationShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.operation = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new Calculate();
    }

}
